I"f<p>Los logs, esos ficheros que recogen lo que sucede en nuestro sistema y sus aplicaciones, es una parte muy importante en el día a día de nuestro trabajo como sysadmin, pero tener que revisar muchos de estos puede llegar a ser una locura, más ahora que el número de servidores que tenemos que tener bajo control es cada vez más y más grande.</p>

<p>Algo más que recomendable es tener un servidor central que se encargue de recoger estos logs y poder acceder a ellos de forma más cómoda, que no tener que estar revisando uno a uno los servidores encontrando el dichoso fichero.</p>

<p>Por eso hoy os contaré la forma de configurar una forma centralizada de recogida de logs y que en caso de caída del servidor rsyslog, no perdamos ningún fichero guardándolos en el cliente en una cola que los mantenga hasta que sea necesario y enviarlos de nuevo.</p>

<h2 id="instalar-y-configurar-rsyslog-server">Instalar y configurar rsyslog server</h2>

<p>Rsyslog es un paquete preinstalado en los sistemas Linux, pero en caso de no tenerlo instalado, podemos obtenerlo de la siguiente manera</p>

<p><code class="language-plaintext highlighter-rouge">yum update -y; yum install rsyslog -y # CentOS 7</code><br />
<code class="language-plaintext highlighter-rouge">apt update -y; apt install rsyslog -y # Ubuntu</code></p>

<p>Editamos el fichero <code class="language-plaintext highlighter-rouge">/etc/rsyslog.conf</code> para configurar que la máquina actúe como servidor.</p>

<p>Descomentamos las siguientes líneas para activar el protocolo UDP y el puerto 514, este último se puede cambiar por otro de nuestra elección.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ModLoad imudp
$UDPServerRun 514
</code></pre></div></div>

<p>Para las conexiones TCP, debemos descomentar las siguientes líneas, e igual que el anterior, podemos poner un puerto a nuestra elección.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ModLoad imudp
InputTCPServerRun 514
</code></pre></div></div>

<p>Configuramos una regla para que recoja todos los logs y los guarde en una carpeta con el nombre del host que se lo envía. Para tener una mejor organización y no trabajar sobre el fichero principal, crearemos un fichero <code class="language-plaintext highlighter-rouge">remotelogs.conf</code>, aunque se puede llamar como queramos siempre que acabe en <code class="language-plaintext highlighter-rouge">.conf</code> dentro de la carpeta <code class="language-plaintext highlighter-rouge">/etc/rsyslog.d/</code></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>template(name="TmplLogRemoto" type="list") {
    constant(value="/var/log/rsyslog/")
    property(name="HOSTNAME")
    constant(value="/")
    property(name="programname" SecurePath="replace")
    constant(value=".log")
    }
*.* ?TmplLogRemoto
</code></pre></div></div>

<p>Lo que hemos hecho es definir que los logs se guarden en <code class="language-plaintext highlighter-rouge">/var/log/rsyslog</code>, después tiene que crear una carpeta con el nombre del host por cada cliente que añadamos posteriormente y luego guarde los registros en ella.</p>

<p>Reiniciamos el servicio.<br />
<code class="language-plaintext highlighter-rouge">systemctl restart rsyslog</code></p>

<p>Comprobamos que el servidor está a la escucha en los puertos indicados anteriormente.<br />
<code class="language-plaintext highlighter-rouge">ss -tulnp | grep "rsyslog"</code></p>

<p>Ahora tenemos que permitir las conexiones a esos puertos en firewalld.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>firewall-cmd --permanent --add-port=514/udp
firewall-cmd --permanent --add-port=514/tcp
firewall-cmd --reload
</code></pre></div></div>

<p>En CentOS, en caso de tener habilitado <strong>SELinux</strong>, hay que permitir el tráfico de esos puertos, por lo que ejecutaremos los siguientes comandos:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>semanage port <span class="nt">-a</span> <span class="nt">-t</span> syslogd_port_t <span class="nt">-p</span> udp 514
semanage port <span class="nt">-a</span> <span class="nt">-t</span> syslogd_port_t <span class="nt">-p</span> tcp 514 
</code></pre></div></div>

<p>Si nos aparece que el comando <code class="language-plaintext highlighter-rouge">semanage</code> no existe, tenemos que ejecutar el siguiente comando para poder instalarlo.<br />
<code class="language-plaintext highlighter-rouge">yum install policycoreutils-python -y</code></p>

<h2 id="configurar-rsyslog-en-el-cliente">Configurar rsyslog en el cliente</h2>

<p>En caso de no tenerlo instalado, hay que seguir los pasos indicados en la parte del servidor, es el mismo paquete.</p>

<p>Como en el caso anterior, para tener una mejor organización, crearemos un fichero en <code class="language-plaintext highlighter-rouge">/etc/rsyslog.d</code> llamado como queramos con la extensión <code class="language-plaintext highlighter-rouge">.conf</code>, en mi caso <code class="language-plaintext highlighter-rouge">clientlogs.conf</code>, y añadimos las siguientes líneas, sustituyendo por la IP del servidor que hemos configurado en el apartado <code class="language-plaintext highlighter-rouge">Target</code>.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>action(type="omfwd"
queue.type="LinkedList"
queue.filename="queue_logs"
action.resumeRetryCount="-1"
queue.saveonshutdown="on"
Target="&lt;ip_servidor&gt;" Port="514" Protocol="tcp")
</code></pre></div></div>

<p>Donde:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">queue.type</code> habilita que la cola de logs sea del tipo LinkedList, que asigna la memoria sólo cuando es necesaria.</li>
  <li><code class="language-plaintext highlighter-rouge">queue.filename</code> define el nombre del disco que almacenará los logs hasta que se envían al servidor. Se guarda en <code class="language-plaintext highlighter-rouge">/var/lib/rsyslog</code>.</li>
  <li><code class="language-plaintext highlighter-rouge">action.resumeRetryCount="-1"</code> evita que rsyslog descarte los mensajes al volver a intentar conectarse si el servidor no responde.</li>
  <li><code class="language-plaintext highlighter-rouge">queue.saveonshutdown</code> guarda datos en memoria si rsyslog se apaga.</li>
  <li>La última línea reenvía todos los mensajes recibidos al servidor por TCP. El puerto es opcional.</li>
</ul>

<p>Para mandar un custom log y realizar una prueba, si ejecutamos <code class="language-plaintext highlighter-rouge">logger &lt;texto&gt;</code>, mandará un log al servidor y comprobaremos si la comunicación se realiza correctamente.</p>

<p>De esta manera, ya tendremos los logs de todos nuestros servidores en un único sitio y no tendremos que estar conectandonos en mil sitios distintos.</p>

<p>En posteriores posts tengo pensado explicar cómo podemos hacer que la comunicación entre servidor/cliente se haga bajo un certificado que cifre la información que se envía, crear templates en los clientes para aplicaciones como Docker, Tomcat y demás, además de desplegar Logstash, Elasticsearch o Kibana para poder trabajar con los logs de forma más visual.</p>

<p>Espero que os haya gustado y os haya servido de ayuda. ¡Hasta la próxima!</p>
:ET